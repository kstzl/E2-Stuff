@name LaserTurret
@persist [ Point ]:vector [ Ang ]:angle [ LaserScale State Break BreakRot MoveRot T ] Ranger:ranger Color:vector Target:entity
@model models/props_borealis/bluebarrel001.mdl


interval(1)

#By K3CR4FT.:DLL 2019

if(first()){
    
    Target = findPlayerByName("Monkey")
    
    #CORE
    holoCreate(0) 
    holoPos(0, entity():toWorld(vec(0, 0, 15))) 
    holoAlpha(0, 0)
    holoParent(0, entity())
    
    holoCreate(1)
    holoAlpha(1, 0)
    
    holoCreate(2)
    holoModel(2, "hqcylinder")
    holoMaterial(2, "models/props_combine/tpballglow")
    State = 0
    
    #DESIGN
    holoCreate(3)
    holoModel(3, "models/mechanics/robotics/xfoot.mdl")
    holoMaterial(3, "phoenix_storms/stripes")
    holoPos(3, entity():toWorld(vec(0, 0, -10)))
    holoParent(3, entity())
    
    holoCreate(4)
    holoModel(4, "models/hunter/misc/sphere075x075.mdl")
    holoMaterial(4, "phoenix_storms/side")
    holoPos(4, holoEntity(3):toWorld(vec(0, 0, 25)))
    holoParent(4, 3)
    
    holoCreate(5)
    holoModel(5, "hqsphere")
    holoMaterial(5, "phoenix_storms/metal_wheel")
    holoPos(5, holoEntity(4):toWorld(vec(0, 0, 15)))
    holoParent(5, 4)
    
    timer("ping", 0)
    
}

if(State == 0){
    findByClass("player")
    findSortByDistance(holoEntity(0):pos())
    Point = find():pos() + vec(0, 0, 25)

}

if(Break == 0){
    
    Dist = Ranger:distance()
    Dist2 = holoEntity(1):pos():distance(Point)
    Ang = ( holoEntity(1):pos() - holoEntity(0):pos() ):toAngle() + ang(90, 0, 0)
    Ranger = rangerOffset(500, holoEntity(4):pos(), holoEntity(2):up())
    Ranger2 = rangerOffset(1000, holoEntity(4):pos(), holoEntity(2):up())
    
    holoPos(1, holoEntity(1):pos() + ( Point - holoEntity(1):pos() ) / 15 )
    holoPos(2, holoEntity(0):pos() + ( Ranger:pos() - holoEntity(0):pos() ) / 2 )
    holoAng(2, Ang)
    holoScaleUnits(2, vec(1, 1, Dist))
    
    holoAng(3, entity():angles() + ang(0, 0, 0) )
    holoAng(4, Ang)
    
    if(State == 0 && Ranger2:entity():type() == "player"){
        
        State = 1
        
    }

}

if(clk("kill")){
    
    State = 2
    timer("restart", 100)
    
}
if(clk("restart")){

    State = 0
    
}

#COLOR
if(State == 0){ Color = vec(0, 255, 0) }
if(State == 1){ Color = vec(255, 165, 0) }
if(State == 2){ Color = vec(255, 0, 0) }

holoColor(2, Color)
holoColor(5, Color)

#SFX
if(clk("ping")){
    
    if(State == 0 && Break == 0){
        holoEntity(1):soundPlay(2, 1, "NPC_CeilingTurret.Ping")
    }
    timer("ping", 1200)    
}

if(changed(State) && State == 1){
    
    holoEntity(0):soundPlay(1, 3, "Weapon_MegaPhysCannon.Charge")
    timer("kill", 1500)
    
}
if(changed(State) && State == 2 && Break == 0){
    
    holoEntity(0):soundPlay(1, 3, "PropJeep.FireChargedCannon")
    MoveRot = -15
    
    if(1 == 1){
        Prop = propSpawn("models/props_phx/cannonball_solid.mdl", 0)
        Prop:setAlpha(250)
        Prop:setPos(Point)
        Prop:propBreak()
    }
}

entity():setAlpha(0)

if(entity():vel():length() >= 300){ Break = 1 }

if(changed(Break) && Break == 0){
    
    for(I = 0, 5){
        
        holoColor(I, holoEntity(I):getColor() * 3)
        
    }
    
}

if(changed(Break) && Break == 1){
    
    timer("breakrot", 1000)
    
    Explosion = propSpawn("models/props_phx/cannonball_solid.mdl", 0)
    Explosion:setAlpha(250)
    Explosion:setPos(entity():pos())
    Explosion:propBreak()
    
    for(I = 0, 5){
        
        holoColor(I, holoEntity(I):getColor() / 3)
        
    }
    
    holoScale(2, vec(0))
    
}

if(clk("breakrot")){
    
    holoEntity(0):soundPlay(0, 3, "LoudSpark")
    
    BreakRot = 5
    
    if(Break == 1){
        
        timer("breakrot", randint(500, 2500))
        
    }
    
}

if(Break == 1){
    
    holoAng(4, holoEntity(4):angles() + ang(BreakRot))
    holoColor(5, vec(BreakRot * randint(0, 255), BreakRot, BreakRot))
    
}

BreakRot += (0 - BreakRot) / 15
MoveRot += (0 - MoveRot) / 15
T += 1

holoPos(4, holoEntity(3):toWorld(vec(0, 0, 25) + (holoEntity(2):up() * MoveRot) ))

if(entity():pos():distance(Target:pos()) >= 300 & Target){
    
    entity():setPos( entity():pos() + (Target:toWorld(vec(0, 0, 50)) - entity():pos() ) / 25 )
}
