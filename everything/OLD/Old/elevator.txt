@name Elevator
@persist [ Cage Door ]:entity [ Floor ]:array
@outputs [ TargetLength Length State Selected Speed ]:number

interval(1)

if(first()){

    Length = 0
    Cage = entity():isWeldedTo()
    Speed = 1
    
    Floor[0, number] = 10
    Floor[1, number] = 300
    Floor[2, number] = 2500
    
    Door = propSpawn("models/props_phx/construct/metal_plate1x2.mdl", 1)
    Door:setAng(Cage:angles() + ang(0, 90, 90))
   # Door:parentTo(Cage)
    
    holoCreate(-1)
    holoPos(-1, Cage:pos())
    holoParent(-1, Cage)
    holoEntity(-1):soundPlay(1, 0, "d3_citadel.pod_move")
    holoAlpha(-1, 0)
    
    for(I = 0, Floor:count()){

        holoCreate(I)
        holoPos(I, Cage:toWorld(vec(-20 + (I * 15), 35, 50)))
        holoParent(I, Cage)
        
    }

}

#STATES
if(Length < TargetLength){ Length += Speed }
if(Length > TargetLength){ Length -= Speed }
State = changed(Length)

#SOUNDS
if(changed(State) && State == 0){ holoEntity(-1):soundPlay(2, 0, "d3_citadel.pod_stop") }
if(changed(State) && State == 1){ holoEntity(-1):soundPlay(2, 0, "d3_citadel.podarm_move_start") }
soundVolume(1, changed(Length))

for(I = 0, Floor:count()){
    
    if(owner():aimPos():distance(holoEntity(I):pos()) <= 5){
        
        holoColor(I, vec(255, 150, 150))
        
        if(changed(owner():keyUse()) && owner():keyUse() == 1){
            
            Selected = I
            TargetLength = Floor[Selected, number]
            
            holoEntity(Selected):soundPlay(3, 0, "Buttons.snd34")
        }
        
    }
    else
    {
        holoColor(I, vec(255))
    }
    
    holoColor(Selected, vec(255, 0, 0))
}

Door:setPos(Cage:toWorld(vec(60, 0, 45)))

Door:propNotSolid(!State)
Door:setAlpha(State * 255)


