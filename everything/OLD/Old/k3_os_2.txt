@name K3_OS_2
@inputs [ Egp ]:wirelink
@persist [ T ]:number
@persist [ Buttons Checkboxes ]:table

interval(100)

#[
  _  ______     ____   _____  __      _____  
 | |/ /___ \   / __ \ / ____| \ \    / /__ \ 
 | ' /  __) | | |  | | (___    \ \  / /   ) |
 |  <  |__ <  | |  | |\___ \    \ \/ /   / / 
 | . \ ___) | | |__| |____) |    \  /   / /_ 
 |_|\_\____/   \____/|_____/      \/   |____|
                                             
  ____          _  ______   _____ _____  _  _   ______ _______  _____     ____
 |  _ \        | |/ /___ \ / ____|  __ \| || | |  ____|__   __||  __ \   / / /
 | |_) |_   _  | ' /  __) | |    | |__) | || |_| |__     | | (_) |  | | / / / 
 |  _ <| | | | |  <  |__ <| |    |  _  /|__   _|  __|    | |   | |  | |/ / /  
 | |_) | |_| | | . \ ___) | |____| | \ \   | | | |       | |_ _| |__| / / /   
 |____/_\__, | |_|\_\____/ \_____|_|__\_\_ |_| |_|      _|_(_|_)_____/_/_/    
 | |/ / |__/ |          | |        |___  /             | |                    
 | ' /| |___/ __ _ _ __ | |_ __ _     / / ___ _ __   __| | __ _               
 |  < | '_ \ / _` | '_ \| __/ _` |   / / / _ \ '_ \ / _` |/ _` |              
 | . \| | | | (_| | |_) | || (_| |  / /_|  __/ | | | (_| | (_| |              
 |_|\_\_| |_|\__,_| .__/ \__\__,_| /_____\___|_| |_|\__,_|\__,_|              
                  | |                                                         
                  |_|                                                         
                                     
                                    K3 OS V2
                                    By K3CR4FT.:DLL / Khapta Zenda (Nx Serv)
                                    2020
                                    
                                    Librairie EGP codee par 'Ivef' (merci a lui)
]#

#######################################################################################################################################

function void wirelink:box(Index:number,Pos:vector2,Size:vector2,Color:vector4){
    This:egpBox(Index,Pos,Size)
    This:egpColor(Index,Color)   
}
function void wirelink:boxoutline(Index:number,Pos:vector2,Size:vector2,Color:vector4){
    This:egpBoxOutline(Index,Pos,Size)
    This:egpColor(Index,Color)   
    This:egpSize(Index,1)
}
function void wirelink:boxoutline(Index:number,Pos:vector2,Size:vector2,Color:vector4,Outline:number){
    This:egpBoxOutline(Index,Pos,Size)
    This:egpColor(Index,Color)   
    This:egpSize(Index,Outline)
}
function void wirelink:roundbox(Index:number,Pos:vector2,Size:vector2,Color:vector4){
    This:egpRoundedBox(Index,Pos,Size)
    This:egpColor(Index,Color)   
}
function void wirelink:roundboxoutline(Index:number,Pos:vector2,Size:vector2,Color:vector4){
    This:egpRoundedBoxOutline(Index,Pos,Size)
    This:egpColor(Index,Color)  
    This:egpSize(Index,1)
}
function void wirelink:roundboxoutline(Index:number,Pos:vector2,Size:vector2,Color:vector4,S:number){
    This:egpRoundedBoxOutline(Index,Pos,Size)
    This:egpColor(Index,Color)  
    This:egpSize(Index,S)
}
function void wirelink:line(Index:number,Pos1:vector2,Pos2:vector2,Color:vector4,Size:number){
    This:egpLine(Index,Pos1,Pos2)
    This:egpColor(Index,Color)
    This:egpSize(Index,Size)
}
function void wirelink:line(Index:number,Pos1:vector2,Pos2:vector2,Color:vector4){
    This:egpLine(Index,Pos1,Pos2)
    This:egpColor(Index,Color)
}
function void wirelink:text(Index:number,Text:string,Pos:vector2,Color:vector,Size:number){
    This:egpText(Index,Text,Pos)
    This:egpColor(Index,Color)
    This:egpSize(Index,Size)
    This:egpAlign(Index,1,1)
}
function void wirelink:text(Index:number,Text:string,Pos:vector2,Color:vector4,Size:number){
    This:egpText(Index,Text,Pos)
    This:egpColor(Index,Color)
    This:egpSize(Index,Size)
    This:egpAlign(Index,1,1)
}
function void wirelink:text(Index:number,Text:string,Pos:vector2,Color:vector,Size:number,Align:string){
    This:egpText(Index,Text,Pos)
    This:egpColor(Index,Color)
    This:egpSize(Index,Size)
    if(Align == "c"){
        This:egpAlign(Index,1,1)
    }
    elseif(Align == "l"){
        This:egpAlign(Index,2,1)
    }
    elseif(Align == "r"){
        This:egpAlign(Index,0,1)
    }
    else{
        This:egpAlign(Index,1,1)
    }
}
function void wirelink:text(Index:number,Text:string,Pos:vector2,Color:vector4,Size:number,Align:string){
    This:egpText(Index,Text,Pos)
    This:egpColor(Index,Color)
    This:egpSize(Index,Size)
    if(Align == "c"){
        This:egpAlign(Index,1,1)
    }
    elseif(Align == "l"){
        This:egpAlign(Index,2,1)
    }
    elseif(Align == "r"){
        This:egpAlign(Index,0,1)
    }
    else{
        This:egpAlign(Index,1,1)
    }
}
function number wirelink:button(ID:number,Cursor:vector2){
    local BPos = This:egpPos(ID)
    local BSize = This:egpSize(ID)/2
    local Pressed = inrange(Cursor,BPos-BSize,BPos+BSize)
    return Pressed
}
 
#######################################################################################################################################

function k3_printError(String_:string){
    print("[K3 ERROR] : " + String_)
}



function wirelink:k3_createButton(Name_:string, Content_:string, Pos_:vector2){

    Tt = 25
    Tx = Content_:length() * Tt/2
    
    T++ E_Box=T This:box(T, Pos_, vec2(Tx + 10, 50), vec4(255, 255, 255, 255))
    T++ E_Text=T This:text(T, Content_, Pos_, vec(0), Tt)
    T++ E_BO=T This:boxoutline(T, Pos_, vec2(Tx + 10, 50), vec4(0, 255, 255, 255))
    
    Buttons:pushTable(table(This, Name_, E_Box, E_Text, E_BO))
    
    T+=3
    
}

function wirelink:k3_createCheckBox(Name_:string, Pos_:vector2){


    T++ This:boxoutline(T, Pos_, vec2(35), vec4(255, 255, 255, 255))
    T++ E_Box=T This:box(T, Pos_, vec2(35/1.25), vec4(0, 255, 255, 255))
    
    Checkboxes:pushTable(table(This, Name_, E_Box, 0))
    
    T+=1
    
}

function number k3_getCheckBoxState(Name_:string){
    
    Final = -1
    
    for(I = 0, Checkboxes:count()){
        
        Cb = Checkboxes[I, table]
        
        if(Cb[2, string] == Name_){
            Final = Cb[4, number]
        }
    }
    
    if(Final == -1){
        k3_printError("No checkbox named : '" + Name_ + "'")
    }
    
    return Final
    
}




if(first() || dupefinished()){
    
    Egp:egpClear()
    
    Egp:k3_createButton("bt1", "Verifier Checkbox", vec2(512 / 2))
    Egp:k3_createButton("bite", "Verifier Checkbox", vec2(512 / 2))
    Egp:k3_createCheckBox("checkbox1", vec2(512 / 2, (512 / 2) + 100))
    
}

if(clk("bt1")){
    
    if(k3_getCheckBoxState("checkbox1") == 0){
        print("Checkbox OFF")   
    }
    else
    {
        print("Checkbox ON")
    }
    
}

for(I = 0, Buttons:count()){
    
    Bt = Buttons[I, table]
    B_EGP = Bt[1, wirelink]
    
    B_User = owner()
    B_Cursor = B_EGP:egpCursor(B_User)
    B_Use = B_User:keyUse()
    B_Box = Bt[3, number]
    B_Use = B_User:keyUse()

    if(B_EGP:button(B_Box, B_Cursor)){
        if(changed(B_Use) && B_Use == 1){
            timer(Bt[2, string], 0)
        }
    }
    
}

for(I = 0, Checkboxes:count()){
    
    Cb = Checkboxes[I, table]
    C_EGP = Cb[1, wirelink]
    
    C_User = owner()
    C_Cursor = B_EGP:egpCursor(B_User)
    C_Use = B_User:keyUse()
    C_Box = Cb[3, number]
    C_Use = B_User:keyUse()

    if(C_EGP:button(C_Box, C_Cursor)){
        if(changed(C_Use) && C_Use == 1){
            Cb[4, number] = !Cb[4, number]
        }
    }
    
    C_EGP:egpColor(C_Box, vec4(0, 255, 255, 255 * Cb[4, number]))
    
}
