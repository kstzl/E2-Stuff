@name IA- IA Super intelligente
@persist N_P:number R_P:array P:entity S:number Sounds:array RDMD:number Models:array Mode3RDG:vector Ang:angle Dist:number RDP:vector AngP:angle AngP1:angle AngP2:angle Color:vector Mode:number Prop:entity MVP:number
@model models/props_junk/PopCan01a.mdl

 #By k3 / 2017 / V1.0
 runOnTick(1)

 findByClass("player")
 findSortByDistance(entity():pos())
 R_P=findToArray()

 if(first())
 {
    
  Color=vec(random(255),random(255),random(255))
    
   entity():setAng(ang(0)) 
   entity():propFreeze(0)

  holoCreate(6) holoColor(6,vec(1))  holoAlpha(6,0) 
  holoCreate(7) holoColor(7,vec(1)) holoPos(7,entity():pos()+vec(0,0,50))  holoAlpha(7,0)
  holoCreate(8) holoColor(8,vec(1)) holoPos(8,entity():pos()+vec(0,0,90))  holoAlpha(8,0)
    
  holoCreate(0) holoPos(0,entity():pos()+vec(7,0,20)) holoScale(0,vec(2,0.9,9)/2) holoColor(0,Color) holoParent(0,holoEntity(7))
  holoCreate(1) holoPos(1,entity():pos()+vec(-7,0,20)) holoScale(1,vec(2,0.9,9)/2) holoColor(1,Color) holoParent(1,holoEntity(7))
 
  holoCreate(2) holoPos(2,entity():pos()+vec(0,0,70)) holoScale(2,vec(5,0.9,9)/2) holoColor(2,Color) holoParent(2,holoEntity(6))
  
  holoCreate(3) holoPos(3,entity():pos()+vec(22.5,0,68)) holoScale(3,vec(2,0.9,9)/2) holoColor(3,Color) holoParent(3,holoEntity(8))
  holoCreate(4) holoPos(4,entity():pos()+vec(-22.5,0,68)) holoScale(4,vec(2,0.9,9)/2) holoColor(4,Color) holoParent(4,holoEntity(8))

  holoCreate(5) holoPos(5,entity():pos()+vec(0,0,90)) holoScale(5,vec(2)) holoAng(5,holoEntity(5):angles()+ang(0,90,0)) holoModel(5,"models/maxofs2d/balloon_gman.mdl" ) holoParent(5,holoEntity(6))

  #holoCreate(9) holoPos(9,holoEntity(4):pos()-vec(0,-10,25)) holoAng(9,ang(10,10,-40)) holoParent(9,holoEntity(4)) holoModel(9,"models/props_junk/garbage_glassbottle003a.mdl") holoScale(9,vec(2))


  Sounds[0,string]="odessa.nlo_cub_hello" holoEntity(6):soundPlay(1,0,Sounds[0,string]) P=owner()
  Sounds[1,string]="odessa.nlo_citizen_drivesafe" 
  Sounds[2,string]="d1_trainstation_01.citizen_introom_beating" 
  Sounds[3,string]="npc_citizen.answer05" 
  Sounds[4,string]="npc_citizen.question04" 
  Sounds[5,string]="npc_citizen.answer20" 
  Sounds[6,string]="npc_citizen.answer07" 
  Sounds[7,string]="npc_citizen.vanswer04" 
  Sounds[8,string]="eli_lab.al_laugh02" 
  Sounds[9,string]="npc_citizen.ow01" 
  Sounds[10,string]="npc_citizen.ow02" 
  Sounds[11,string]="npc_citizen.uhoh" 
  Sounds[12,string]="npc_citizen.question01" 
  Sounds[13,string]="npc_citizen.question02" 
  Sounds[14,string]="npc_citizen.question03" 
  Sounds[15,string]="npc_citizen.question04" 
  Sounds[16,string]="npc_citizen.question05" 

  Models[1,string]="models/props_c17/FurnitureDrawer001a.mdl"
  Models[2,string]="models/props_c17/display_cooler01a.mdl"
  Models[3,string]="models/hunter/blocks/cube025x025x025.mdl"
  Models[4,string]="models/hunter/plates/plate1x1.mdl"
  Models[5,string]="models/props_c17/pulleywheels_large01.mdl"
  Models[6,string]="models/props_c17/pulleywheels_small01.mdl"
  Models[7,string]="models/Combine_Helicopter/helicopter_bomb01.mdl"
  Models[8,string]="models/hunter/blocks/cube1x1x1.mdl"
  Models[9,string]="models/hunter/blocks/cube1x150x1.mdl"
  Models[10,string]="models/props_phx/construct/metal_plate1x2.mdl"
  Models[11,string]="models/props_phx/construct/metal_plate1.mdl"
  Models[12,string]="models/NatesWheel/nateswheel.mdl"


  Mode=3


 }

 entity():setAlpha(0)
 S=randint(0,151)

  if(changed(Mode)){ propDeleteAll() }
 if(Mode == 1)
 {
  N_P+=1 
  Dist=entity():pos():distance(P:pos())
  Ang = (holoEntity(6):pos() - P:pos()):toAngle()+ang(0,90,0)

  if(N_P >= 90){ P=R_P[randint(1,3),entity] N_P=0 entity():setAng(ang(0)) }
  if(changed(S)&&S==10){ holoEntity(6):soundPlay(2,0,Sounds[randint(0,Sounds:count()),string]) }

  if(Dist >= 400 && Dist < 2000)
  {
   entity():applyForce(((P:pos()+vec(0,0,70)-entity():massCenter())*entity():mass())/(Dist/100)/5)
   
  }
  if(changed(entity():vel():length()) && entity():vel():length() >= 1500)
  {
    holoEntity(6):soundPlay(3,0,Sounds[randint(9,10),string])
  }

 }

 if(Mode == 2)
 {
  Ang = (holoEntity(6):pos() - Prop:pos()):toAngle()+ang(0,90,0) 
  Dist=entity():pos():distance(Prop:pos())

  MVP++
  if(MVP == 60)
  {
     MVP=0
     Prop:setAng(ang(0))  
     AngP2=ang(0,0,90)
     Prop=propSpawn(Models[randint(1,Models:count()),string],0) Prop:setPos(entity():pos()+vec(randint(-50,50),randint(-50,50),50))
     timer("rst_a",1000)
    
  }
 if(clk("rst_a")){ AngP2=ang(0) }
 if(Dist >= 300 & Prop)
  {
   entity():applyForce(((Prop:pos()+vec(0,0,70)-entity():massCenter())*entity():mass())/(Dist/100)*1)
  }
 if(changed(S) && S >= 150)
 {
    entity():applyForce(((players()[randint(1,players():count()),entity]:pos()+vec(0,0,70)-entity():massCenter())*entity():mass()/5))
 }
 if(changed(S) && S == 20){ Prop:applyAngForce(ang(0,9000,0)) }
  if(changed(S) && S == 19){ Prop:propFreeze(randint(0,1)) }
 if(changed(S) && S == 25){ Prop:applyForce(vec(0,0,randint(500,3500))) }
 if(changed(S) && S >= 150){ Prop:applyForce(((players()[randint(1,players():count()),entity]:pos()+vec(0,0,70)-Prop:massCenter())*Prop:mass())/randint(1,3)) }
  if(changed(S) && S == 2){ propDeleteAll() }
 }

 if(Mode == 3)
 {
  MVP++
  if(MVP == 75)
  {
    MVP=0
    Mode3RDG=vec(randint(-5000,5000),randint(-5000,5000),5)
    Ang = (holoEntity(6):pos() - Mode3RDG):toAngle()+ang(0,90,0) 
    entity():applyForce(((entity():pos()+Mode3RDG-entity():massCenter())*entity():mass())/5)
    
  }
 }
 if(changed(Mode) && Mode == 4)
 {
 AngP1=ang(0,0,90)
 entity():setPos(entity():pos()-vec(0,0,40))
 } 
 if(Mode == 4){ entity():propFreeze(1) }
 if(changed(Mode) && Mode != 4){ entity():propFreeze(0) AngP1=ang(0) entity():setPos(entity():pos()+vec(0,0,50)) }

if(entity():vel():length() >= 10)
  {
  AngP=ang(0,0,randint(-30,30))
  }else{ AngP=ang(0) }
  holoPos(6,entity():pos())
  holoPos(7,entity():pos()+vec(0,0,50))  
  holoPos(8,entity():pos()+vec(0,0,90))

  holoAng(6,ang(0,Ang:yaw(),0))
  holoAng(7,ang(0,Ang:yaw(),0)+AngP+AngP1)
  holoAng(8,ang(0,Ang:yaw(),0)+-AngP+AngP2)

  RDMD++
  if(RDMD == 150)
  {
     RDMD=0
     Mode=randint(1,3)
  }

